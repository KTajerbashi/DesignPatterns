@page "/observer"
@using DesignPatterns.Behavioral.Observer
@rendermode InteractiveServer

<PageTitle>Observer</PageTitle>



<h3>👁️ Observer Pattern Demo - Weather Station</h3>

<p>
    This demo shows how observers automatically update when the weather station (subject) changes temperature.
</p>

<div class="card p-3 shadow-sm">
    <div class="row mb-3">
        <div class="col-md-6">
            <label class="form-label">Temperature (°C)</label>
            <input type="number" step="0.1" class="form-control" @bind="TemperatureInput" />
        </div>

        <div class="col-md-6 d-flex align-items-end">
            <button class="btn btn-primary w-100" @onclick="UpdateTemperature">Update Temperature</button>
        </div>
    </div>

    <h5 class="mt-3">Display Devices</h5>
    <div class="row">
        @foreach (var device in Displays)
        {
            <div class="col-md-4">
                <div class="card mb-3 text-center">
                    <div class="card-header bg-light fw-bold">@device.Name</div>
                    <div class="card-body">
                        <h4>@device.CurrentTemperature.ToString("0.0") °C</h4>
                    </div>
                </div>
            </div>
        }
    </div>
</div>

@code {
    private WeatherStation WeatherStation = new();
    private List<DisplayDevice> Displays = new();
    private float TemperatureInput;

    protected override void OnInitialized()
    {
        // Create observer devices
        var phoneDisplay = new DisplayDevice("📱 Phone App");
        var webDisplay = new DisplayDevice("💻 Web Dashboard");
        var wallDisplay = new DisplayDevice("🖥️ Wall Display");

        // Attach observers to subject
        WeatherStation.Attach(phoneDisplay);
        WeatherStation.Attach(webDisplay);
        WeatherStation.Attach(wallDisplay);

        Displays.AddRange(new[] { phoneDisplay, webDisplay, wallDisplay });
    }

    private void UpdateTemperature()
    {
        WeatherStation.Temperature = TemperatureInput;
    }
}
